#!/bin/bash

set -o xtrace
set -e

link_in_homedir=( vimrc zshrc hyper.js tmux.conf gitignore_global hammerspoon asdfrc iterm2 iterm2_shell_integration.zsh gitconfig wezterm.lua )
link_in_config=( fish nvim alacritty git atuin )

possible_brew_paths=( /usr/local/bin/brew /home/linuxbrew/.linuxbrew/bin/brew "$HOME/.linuxbrew/bin/brew" /opt/homebrew/bin/brew )
exists() { type "$1" > /dev/null 2>&1; }

symlink_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

for i in "${link_in_homedir[@]}"
do
	ln -nsf "$symlink_dir/$i" "$HOME/.$i"
done

mkdir -p ~/.config
for i in "${link_in_config[@]}"
do
	ln -nsf "$symlink_dir/$i" "$HOME/.config/$i"
done

for brewpath in "${possible_brew_paths[@]}"; do
  if exists "$brewpath"; then
    eval "$($brewpath shellenv)"
    break
  fi
done

if exists vim; then
  echo "Installing vim plugins"
  vim -es -u "$HOME/.vimrc" -i NONE -c "PlugInstall" -c "qa"
else
  echo "No vim found, skipping"
fi

if exists nvim; then
  echo "Installing nvim plugins"
  nvim --headless "+Lazy! restore" +qa
else
  echo "No nvim found, skipping"
fi

if [ "$CODESPACES" = true ]; then
	echo "Running codespaces setup"
  sudo chsh -s /bin/zsh "$(whoami)"
  gh api "/user/codespaces/$CODESPACE_NAME" -q .display_name > "$HOME/.friendly_name"
  if [[ "$symlink_dir" != "$HOME/.dotfiles" ]]; then
    ln -nsf "$symlink_dir" "$HOME/.dotfiles"
  else
    echo "skipping dotfiles symlink, would create a loop"
  fi
  if [[ -d  "/workspaces/github/bin" ]]; then
    # shellcheck disable=SC2016
    echo 'export PATH="/workspaces/github/bin:$PATH"' > "$HOME/.zshenv"
  fi
  sudo mkdir -p /etc/apt/keyrings
  wget -qO- https://raw.githubusercontent.com/eza-community/eza/main/deb.asc | sudo gpg --dearmor -o /etc/apt/keyrings/gierens.gpg
  echo "deb [signed-by=/etc/apt/keyrings/gierens.gpg] http://deb.gierens.de stable main" | sudo tee /etc/apt/sources.list.d/gierens.list
  sudo chmod 644 /etc/apt/keyrings/gierens.gpg /etc/apt/sources.list.d/gierens.list
  sudo apt update
  sudo apt install -y eza fd-find fzf shellcheck
  bat_deb_url=$(gh release view --repo sharkdp/bat --json assets --jq '.assets[] | select((.name | test("amd64.deb") and (test("musl") | not)  )) | .url')
  curl -LO "$bat_deb_url"
  sudo dpkg -i bat_*.deb
  git_delta_deb_url=$(gh release view --repo dandavison/delta --json assets --jq '.assets[] | select((.name | test("amd64.deb") and (test("musl") | not)  )) | .url')
  curl -LO "$git_delta_deb_url"
  sudo dpkg -i git-delta_*.deb
  curl --proto '=https' --tlsv1.2 -LsSf https://setup.atuin.sh | sh
fi

